import java.util.ArrayList;
import java.util.List;
import java.util.Queue;

class BinaryLifting {
  List<List<Integer>> adj;
  int[][] dp;
  int n;
  int[] levels;

  BinaryLifting(List<List<Integer>> tree, int totalNodes) {
    adj = new ArrayList<>();
    this.adj = tree;
    this.n = totalNodes;
    dp = new int[n][21];
    levels = new int[n];
    for (int i = 0; i <= 20; ++i) dp[0][i] = -1;
    bfs();
  }

  void bfs() {
    Queue<Integer> q = new ArrayDeque<>();
    q.offer(0);
    boolean[] visited = new boolean[n];
    visited[0] = true;
    while (!q.isEmpty()) {
      int curr = q.poll();
      for (int each : adj.get(curr)) {
        if (visited[each]) continue;
        levels[each] = levels[curr] + 1;
        dp[each][0] = curr;
        for (int i = 1; i <= 20; ++i) {
          if (dp[each][i - 1] == -1) {
            dp[each][i] = -1;
            continue;
          }
          dp[each][i] = dp[dp[each][i - 1]][i - 1];

        }
        q.offer(each);
        visited[each] = true;
      }
    }
  }

  int getLowestCommonAncestor(int x, int y) {
    if (levels[x] > levels[y]) {
      int temp = x;
      x = y;
      y = temp;
    }
    y = moveUp(y, levels[y] - levels[x]);
    if (y == x) return x;
    for (int i = 20; i >= 0; --i) {
      if (dp[x][i] == dp[y][i]) continue;
      x = dp[x][i];
      y = dp[y][i];
    }
    return dp[x][0];
  }

  private int moveUp(int node, int diff) {
    int res = node;
    for (int i = 0; i <= 20; ++i) {
      int mask = 1 << i;
      if ((diff & mask) > 0) {
        res = dp[res][i];
      }
    }
    return res;
  }

  int getKthAncestor(int node, int k) {
    int res = node;
    for (int i = 0; i <= 20; ++i) {
      int mask = 1 << i;
      if ((k & mask) > 0) {
        if (dp[res][i] == -1) return -1;
        res = dp[res][i];
      }
    }
    return res;
  }
}
